Sort the Array: Start by sorting nums to allow for the two-pointer approach and easier duplicate handling.
Outer Loops for Fixed Pairs: Use two nested loops to fix the first two numbers (nums[i] and nums[j]), skipping duplicates to avoid repeated quadruplets.
Two-Pointer Search: For each pair (i, j), initialize two pointers (k and l) to find two additional numbers that complete the quadruplet to match the target sum.
Check Sum and Move Pointers: Calculate the sum of the four numbers; if it matches target, add the quadruplet to the result. Adjust k and l and skip duplicates.
Return Results: After processing all combinations, return the list of unique quadruplets that sum to target.

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();

        for(int i = 0; i< nums.length; i++) {
            if(i  >  0 && nums[i] == nums[i-1]) {
                continue;
            }
            for(int j = i + 1; j < nums.length; j++) {
                if(j > i + 1 && nums[j] == nums[j-1]) {
                    continue;
                }
                int k = j + 1;
                int l = nums.length - 1;

                while(k < l) {
                    long sum = (long) nums[i] + nums[j] + nums[k] + nums[l];

                    if(sum < target) {
                        k++;
                    } else if(sum > target) {
                        l--;
                    } else {
                        List<Integer> list = new ArrayList<>();
                        Collections.addAll(list, nums[i], nums[j], nums[k], nums[l]);
                        res.add(list);
                        k++;
                        l--;

                        while(k < l && nums[k] == nums[k-1]) {
                            k++;
                        }

                        while(k < l && nums[l] == nums[l+1]) {
                            l--;
                        }  
                    }                
                }
            }
        }
        return res;
    }
}
