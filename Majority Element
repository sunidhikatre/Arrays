Initialize a counter (cnt) and a candidate element (ele) to track the current majority candidate.
Iterate through the array, adjusting the counter based on whether the current element matches the candidate:
increment cnt if it matches and decrement if it doesnâ€™t; reset the candidate when cnt reaches zero.
After the first pass, ele contains a potential majority candidate.
Verify the candidate by counting its occurrences in a second pass through the array.
If the count exceeds half the array size, return the candidate; otherwise, return -1.

class Solution {
    public int majorityElement(int[] nums) {
        int cnt = 0;
        int ele = 0;
        int res = 0;

        for(int i = 0; i< nums.length; i++) {
            if(cnt == 0) {
                cnt = 1;
                ele = nums[i];
            }
            else if(nums[i] == ele) {
                cnt ++;
            }
            else {
                cnt--;
            }
        }
        System.out.println(ele);

        for(int i=0; i< nums.length; i++) {
            if(nums[i] == ele) {
                res++;
            }
        }
        System.out.println(res);
        if(res > nums.length/2) {
            return ele;
        }
        return -1;
    }

}
