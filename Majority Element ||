Initialization: Set up two candidate variables (ele1, ele2) and their respective counters (cnt1, cnt2) to track potential majority elements and their counts.
First Pass: Iterate through the array, updating the candidates and their counts based on the current number; if a number matches a candidate, increment the counter, otherwise decrement both counters if neither candidate matches.
Second Pass: Reset the counters and perform another iteration to count the occurrences of the two candidates in the array.
Check Conditions: After counting, check if each candidate appears more than n/3 times (where n is the length of the array).
Return Results: Add the valid candidates to the result list and return it.
This approach efficiently identifies up to two majority elements that occur more than n/3 times in linear time.

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        int cnt1 = 0;
        int cnt2 = 0;
        int ele1 = Integer.MIN_VALUE;
        int ele2 = Integer.MIN_VALUE;
        List<Integer> res = new ArrayList<>();

        for(int i = 0; i< nums.length; i++) {
            if(cnt1 == 0 && nums[i] != ele2) {
                ele1 = nums[i];
                cnt1 = 1;
            } else if(cnt2 == 0 && nums[i] != ele1) {
                ele2 = nums[i];
                cnt2 = 1;
            } else if(ele1 == nums[i]) {
                cnt1++;
            } else if(ele2 == nums[i]) {
                cnt2++;
            } else{
                cnt1--;
                cnt2--;
            }
        }

        int eleOneCount = 0;
        int eleTwoCount = 0;

        for(int i=0; i<nums.length;i++){
            if(nums[i] == ele1){
                eleOneCount++;
            }

            if(nums[i] == ele2){
                eleTwoCount++;
            }
        }

        if(eleOneCount > nums.length/3){
            res.add(ele1);
        }

        
        if(eleTwoCount > nums.length/3){
            res.add(ele2);
        }

        return res;
    }
}
