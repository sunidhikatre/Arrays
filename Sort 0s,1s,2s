low: Marks the boundary of the 0s. All elements before low are 0s.
mid: Scans through the array. Depending on the value at nums[mid], it adjusts the boundaries for 0s and 2s.
high: Marks the boundary of the 2s. All elements from high + 1 to the end of the array are 2s.

class Solution {
    public void sortColors(int[] nums) {
        int low = 0;
        int mid = 0;
        int temp = 0;
        int high = nums.length - 1;

        while(mid <= high){
            if(nums[mid] == 0) {
                temp = nums[mid];
                nums[mid] = nums[low];
                nums[low] = temp;
                low++;
                mid++;
            }

            else if(nums[mid] == 1){
                mid++;
            } else  {
                temp = nums[mid];
                nums[mid] = nums[high];
                nums[high] = temp;
                high--;
            }
        }
    }
}

