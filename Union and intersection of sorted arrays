import java.util.ArrayList;
import java.util.List;

public class ArrayOperations {

    // Method to get the union of two sorted arrays
    public static List<Integer> union(int[] nums1, int[] nums2) {
        List<Integer> unionList = new ArrayList<>();
        int i = 0, j = 0;

        while (i < nums1.length && j < nums2.length) {
            // If elements are the same, add it once and move both pointers
            if (nums1[i] == nums2[j]) {
                unionList.add(nums1[i]);
                i++;
                j++;
            } 
            // If the current element in nums1 is smaller, add it and move the pointer
            else if (nums1[i] < nums2[j]) {
                unionList.add(nums1[i]);
                i++;
            } 
            // If the current element in nums2 is smaller, add it and move the pointer
            else {
                unionList.add(nums2[j]);
                j++;
            }
        }

        // Add remaining elements from nums1
        while (i < nums1.length) {
            unionList.add(nums1[i]);
            i++;
        }

        // Add remaining elements from nums2
        while (j < nums2.length) {
            unionList.add(nums2[j]);
            j++;
        }

        return unionList;
    }

    // Method to get the intersection of two sorted arrays
    public static List<Integer> intersection(int[] nums1, int[] nums2) {
        List<Integer> intersectionList = new ArrayList<>();
        int i = 0, j = 0;

        while (i < nums1.length && j < nums2.length) {
            // If elements are the same, add it to the intersection and move both pointers
            if (nums1[i] == nums2[j]) {
                intersectionList.add(nums1[i]);
                i++;
                j++;
            } 
            // Move the pointer in nums1 if its element is smaller
            else if (nums1[i] < nums2[j]) {
                i++;
            } 
            // Move the pointer in nums2 if its element is smaller
            else {
                j++;
            }
        }

        return intersectionList;
    }
